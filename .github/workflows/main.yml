
name: Python App CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest

      - name: SonarQube analysis
        uses: SonarSource/sonarqube-scan-action@v1
        with:
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-login: ${{ secrets.SONAR_LOGIN }}
          project-key: my-python-app

  notify-slack:
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ always() }}
    steps:
      - name: Notify Slack on success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
              --data '{"text": "Python app build and test succeeded!"}' \
              $SLACK_WEBHOOK_URL

      - name: Notify Slack on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
              --data '{"text": "Python app build or test failed!"}' \
              $SLACK_WEBHOOK_URL

  deploy-aq:
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
      - name: Deploy to AQ
        env:
          AQ_HOST: ${{ secrets.AQ_HOST }}
          AQ_USER: ${{ secrets.AQ_USER }}
          AQ_PASSWORD: ${{ secrets.AQ_PASSWORD }}
        run: |
          # Run deployment script to AQ environment
          python deploy.py -e aq -h $AQ_HOST -u $AQ_USER -p $AQ_PASSWORD

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ github.ref == 'refs/tags/*' && success() }}
    steps:
